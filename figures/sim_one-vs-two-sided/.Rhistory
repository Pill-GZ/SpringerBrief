}
lam <- d^2*(1/(p*q) + 1/(p*(1-q)) + 1/((1-p)*q) + 1/((1-p)*(1-q)))
return(lam)
}
#### Figure 1: p = 1/2 ####
library(MASS)
setEPS()
postscript("singal-vs-odds-p05.eps", height = 4, width = 4)
p <- 1/2
q <- 1/2
lam <- lam.finder(p, q)
par(mar = c(3,3,2,1))
plot(x = OR, y = lam, log = 'x', type = 'n', las = 1, ylim = c(0,1), xaxt = 'n')
mtext(text = expression(paste("signal size ", w^2, '= ', lambda/n)),
side = 2, at = 1.1, las = 1, line = -5)
axis(side = 1, at = 10^seq(-6, 6, 2),
labels = parse(text = paste("10^", seq(-6, 6, 2), sep="")))
mtext(text = "odds ratio", side = 1, at = 3e5, las = 1, line = 2)
q.vec <- as.character(fractions(1/c(2, 3, 5, 10)))
for (i in 1:length(q.vec)) {
q <- eval(parse(text = q.vec[i]))
lam <- lam.finder(p, q)
lines(x = OR, y = lam, col = 1, lty = i)
text(x = 1e6, y = 0.95*lam[1] - 0.04, pos = 2,
labels = bquote(paste(theta[1], " = ", .(q.vec[i]), ", ", phi[1], " = 1/2", sep="")))
}
dev.off()
#### Figure 2: p = 1/3 ####
setEPS()
postscript("singal-vs-odds-p0333.eps", height = 4, width = 4)
p <- 1/3
q <- 1/3
lam <- lam.finder(p, q)
par(mar = c(3,3,2,1))
plot(x = OR, y = lam, log = 'x', type = 'n', las = 1, ylim = c(0,1), xaxt = 'n')
mtext(text = expression(paste("signal size ", w^2, '= ', lambda/n)),
side = 2, at = 1.1, las = 1, line = -5)
axis(side = 1, at = 10^seq(-6, 6, 2),
labels = parse(text = paste("10^", seq(-6, 6, 2), sep="")))
mtext(text = "odds ratio", side = 1, at = 3e5, las = 1, line = 2)
q.vec <- as.character(fractions(1/c(3, 5, 10)))
for (i in 1:length(q.vec)) {
q <- eval(parse(text = q.vec[i]))
lam <- lam.finder(p, q)
lines(x = OR, y = lam, col = 1, lty = i)
text(x = 1e6, y = 0.95*lam[100] - 0.04, pos = 2,
labels = bquote(paste(theta[1], " = ", .(q.vec[i]), ", ", phi[1], " = 1/3", sep="")))
}
dev.off()
load(file = "strong.boundary.one-vs-two-sided.Rdata")
setwd("~/Research_office/SpringerBrief/SpringerBrief_ss/figures/sim_one-vs-two-sided")
load(file = "strong.boundary.one-vs-two-sided.Rdata")
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.3)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
p.vec <- c(100, 1000, 10000, 100000)
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.3)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
beta <- 0.6
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.3)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
resolution <- 20
r.max <- 6
r.list <- seq(from = r.max/2/resolution, to = r.max - r.max/2/resolution, by = r.max/resolution)
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.3)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4, width = 3.5)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.3)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4, width = 3.5)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.2)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5.2)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.2))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
beta <- 0.6
p.vec <- c(100, 1000, 10000, 100000)
resolution <- 20
r.max <- 6
r.list <- seq(from = r.max/2/resolution, to = r.max - r.max/2/resolution, by = r.max/resolution)
load(file = "weak.boundary.one-vs-two-sided.Rdata")
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.7)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
beta <- 0.6
p.vec <- c(100, 1000, 10000, 100000)
resolution <- 20
r.max <- 3
r.list <- seq(from = r.max/2/resolution, to = r.max - r.max/2/resolution, by = r.max/resolution)
load(file = "weak.boundary.one-vs-two-sided.Rdata")
for (p in p.vec) {
setEPS()
postscript(paste0("approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 4.5, width = 4)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.7)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.7)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.4)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.5)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3.2)
par(mar = c(2.8,2.2,1.5,0.3))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.5)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.5))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.5)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.5))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.7)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("__approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.5))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.5)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
for (p in p.vec) {
setEPS()
postscript(paste0("approx_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.5))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- beta
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 2.5)
mtext(text = 'Risk approx. recovery', side = 2, line = -5.8, at = 1 * 1.1, las = 1)
text(x = 2, y = 0.80, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 2, y = 0.72, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 2, y = 0.72, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
beta <- 0.6
p.vec <- c(100, 1000, 10000, 100000)
resolution <- 20
r.max <- 6
r.list <- seq(from = r.max/2/resolution, to = r.max - r.max/2/resolution, by = r.max/resolution)
load(file = "strong.boundary.one-vs-two-sided.Rdata")
for (p in p.vec) {
setEPS()
postscript(paste0("exact_recovery_one-vs-two-sided_beta0", beta*10,
"_p", format(p, scientific=F),".eps"), height = 3.5, width = 3)
par(mar = c(2.8,2.2,1.5,0.5))
matplot(t(drop(result.array[,,as.character(p)])), type = 'n',
las = 1, ylim = c(0, 1), x = r.list, col = 1,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
theoretical.boundary <- (sqrt(1-beta)+1)^2
polygon(x = c(rep(theoretical.boundary, 2), rep(r.max, 2)),
y = c(0, 1, 1, 0), col = grey(0.9), border = F)
lines(x = rep(theoretical.boundary, 2), y = c(0, 1), lty = 3)
abline(h = c(0, 1), lty = 3)
matplot(t(drop(result.array[,,as.character(p)])), type = 'b',
las = 1, ylim = c(0, 1), x = r.list, col = 1, add = T,
pch = as.character(c(1,1,2,2)), lty = c(1,2,1,2))
mtext(text = bquote('signal size' ~ r), side = 1, line = 2, at = 5)
mtext(text = 'Prob. exact recovery', side = 2, line = -5.5, at = 1 * 1.1, las = 1)
text(x = 4, y = 0.18, pos = 4, labels = bquote(beta ~ '=' ~ .(beta)))
# text(x = 4, y = 0.10, pos = 4, labels = paste0("p = ", format(p, scientific=F)))
text(x = 4, y = 0.10, pos = 4, labels = bquote("p =" ~ 10^.(log10(p))))
dev.off()
}
